package fr.adiveo.samples;import com.opencsv.CSVWriter;import com.opencsv.bean.CsvToBeanBuilder;import com.opencsv.bean.HeaderColumnNameMappingStrategy;import com.opencsv.bean.StatefulBeanToCsv;import com.opencsv.bean.StatefulBeanToCsvBuilder;import fr.adiveo.samples.domain.User;import org.apache.commons.collections4.comparators.ReverseComparator;import org.junit.jupiter.api.Test;import java.io.BufferedWriter;import java.io.FileReader;import java.io.IOException;import java.io.Reader;import java.nio.charset.Charset;import java.nio.file.Files;import java.nio.file.Path;import java.util.ArrayList;import java.util.Comparator;import java.util.List;import static org.junit.jupiter.api.Assertions.assertEquals;/** * : Akram - 25/05/2020. */public class CsvTest {    public static final String[] HEADERS = { "firstname", "lastname", "age" };    @Test    public void givenCSVFile_whenRead_thenContentsAsExpected() throws IOException {        Reader in = new FileReader("src/test/resources/users.csv");        List<User> beans = new CsvToBeanBuilder(in).withSeparator(';')                .withType(User.class).build().parse();        List<User> expectedList = new ArrayList<>();        expectedList.add(new User("John", "Nash", 12));        expectedList.add(new User("Marc", "Fish", 23));        int index = 0;        for(User user : beans) {            assertEquals(expectedList.get(index).getFirstName(), user.getFirstName());            assertEquals(expectedList.get(index).getLastName(), user.getLastName());            assertEquals(expectedList.get(index).getAge(), user.getAge());            index++;        }    }    @Test    public void givenUsersList_whenWrittenToStream_thenOutputStreamAsExpected() throws Exception {        String expectedFilestream = "firstname;lastname;age" + System.lineSeparator() +                "John;Nash;12" + System.lineSeparator() +                "Marc;Fish;23" + System.lineSeparator();        List<User> users = new ArrayList<>();        users.add(new User("John", "Nash", 12));        users.add(new User("Marc", "Fish", 23));        Path temp = Files.createTempFile("users_", "export");        BufferedWriter bufferedWriter = Files.newBufferedWriter(temp, Charset.defaultCharset());        HeaderColumnNameMappingStrategy<User> strategy = new HeaderColumnNameMappingStrategy<>();        strategy.setType(User.class);        strategy.setColumnOrderOnWrite(new ReverseComparator());        StatefulBeanToCsv beanToCsv = new StatefulBeanToCsvBuilder(bufferedWriter)                .withSeparator(';')                .withMappingStrategy(strategy)                .withQuotechar(CSVWriter.NO_QUOTE_CHARACTER)                .build();        beanToCsv.write(users);        bufferedWriter.close();        String linesAsString = Files.readString(temp);        // it will fail !!        // the result -->        // LASTNAME;FIRSTNAME;AGE        //Nash;John;12        //Fish;Marc;23        assertEquals(expectedFilestream, linesAsString);        // as you can see, when working with annotations, it is not easy to deal with custom column order,        // header is capitalized ..        //imho , the best way is to work with        // CSVWriter writer = new CSVWriter(new FileWriter("yourfile.csv"), '\t');        // instead of StatefulBeanToCsv    }}